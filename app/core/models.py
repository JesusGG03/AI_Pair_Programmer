from pydantic import Field, BaseModel, conint
from typing import Optional

class IdeContext(BaseModel):
    """
    Defines the context data sent by the IDE Plugin to the FastAPI server.
    This informs the AI about the user's current working environment.
    """
    file_path: str = Field(..., description="The full path or relative path of the file being edited.")
    file_content: str = Field(..., description="The full text content of the active file.")
    cursor_line: conint(ge=1) = Field(..., description="The line number where the cursor is currently positioned (1-indexed).")
    selected_text: str = Field(default="", description="The text string being highlighted by the user. Can be empty.")

    class Config:
        # Optional schema to be generated
        json_schema_extra = {
            "example": {
                "file_path": "/src/app/main.py",
                "file_content": "def hello_world():\n    print('Hello, world!')\n# TODO: Add greeting feature",
                "cursor_line": 3,
                "selected_text": "# TODO: Add greeting feature"
            } 
        }


class QueryResponse(BaseModel):
    """
    Defines the final JSON response sent back to the IDE Plugin.
    
    NOTE: Audio is played by the server on the local machine,
    not sent back to the IDE. This model is for confirmation and logging.
    """
    status: str = Field(default="success", description="Indicates the result of the operation.")
    text_transcribed: str = Field(..., description="The raw transcription of the user's voice query (for debug/display).")
    ai_response_text: str = Field(..., description="The plain text response generated by the LLM (for debug/display).")
    error_message: Optional[str] = Field(None, description="If status is 'error', this contains the details.")
    